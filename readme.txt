# üöÄ Projeto de Criptografia H√≠brida: Python + C++

Ol√°, rede!

Gostaria de compartilhar um projeto que desenvolvi para explorar a sinergia entre Python e C++, demonstrando como utilizar a for√ßa de cada linguagem para criar uma solu√ß√£o de automa√ß√£o eficiente e de alta performance.

### O Conceito

Este projeto √© um sistema de criptografia simples que utiliza uma arquitetura h√≠brida:

* **Python (O Orquestrador Inteligente):** Atua como a interface amig√°vel (front-end). √â respons√°vel por gerenciar a intera√ß√£o com o usu√°rio, validar os dados de entrada e orquestrar o fluxo de trabalho. Sua simplicidade e legibilidade o tornam perfeito para essa tarefa.

* **C++ (O Motor de Alta Performance):** Atua como o n√∫cleo de processamento (back-end). A l√≥gica de criptografia, que pode ser computacionalmente intensiva, √© implementada em C++ para garantir a m√°xima velocidade e efici√™ncia. O programa C++ √© compilado em um execut√°vel e chamado pelo script Python.

Essa abordagem combina "o melhor dos dois mundos": a agilidade e facilidade de desenvolvimento do Python com a performance bruta do C++.

### Arquitetura do Projeto

1.  **Interface em Python:** Um script `cripto.py` oferece fun√ß√µes simples de `encrypt()` e `decrypt()`.
2.  **Comunica√ß√£o:** O Python utiliza o m√≥dulo `subprocess` para executar o programa C++ compilado, passando a a√ß√£o (criptografar/descriptografar), a chave e o texto como argumentos de linha de comando.
3.  **Processamento em C++:** O execut√°vel `motor_cripto` recebe os argumentos, realiza a opera√ß√£o de criptografia (usando uma cifra de XOR como prova de conceito) e imprime o resultado na sa√≠da padr√£o.
4.  **Retorno:** O Python captura a sa√≠da do programa C++ e a retorna ao usu√°rio final.

### Como Executar

1.  **Pr√©-requisitos:**
    * Um compilador C++ (como o g++ via MSYS2 no Windows).
    * Python 3.x.

2.  **Compila√ß√£o:**
    * Compile o motor de criptografia:
        ```sh
        g++ -o motor_cripto motor_cripto.cpp
        ```

3.  **Execu√ß√£o:**
    * Execute o script de exemplo para ver a m√°gica acontecer:
        ```sh
        python exemplo_uso.py
        ```

Este projeto foi um exerc√≠cio fascinante sobre interoperabilidade de linguagens e design de software, mostrando que √© poss√≠vel construir sistemas robustos e eficientes escolhendo a ferramenta certa para cada tarefa.

Sinta-se √† vontade para conectar e discutir mais sobre tecnologia, programa√ß√£o e o futuro da IA!

#Python #Cpp #Cplusplus #DesenvolvimentoDeSoftware #Programa√ß√£o #EngenhariaDeSoftware #Criptografia #Automa√ß√£o